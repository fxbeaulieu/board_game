Creating a board game using Pygame involves several steps. Below, you'll find a general guide on how to get started:

1. Install Pygame: You can install Pygame using pip by entering the following command in your terminal:
```
pip install pygame
```
2. Initialize Pygame: Before you can do anything in Pygame, you need to initialize it.
```python
import pygame
pygame.init()
```
3. Set Up the Display: The next step is to set up the display. You can create a window for your game using `pygame.display.set_mode()`. This function takes a tuple that represents the width and height of the window.
```python
screen = pygame.display.set_mode((800, 600))  # width, height
```
4. Create a Game Loop: Your game will require a loop that runs continuously until the player exits the game.
```python
running = True
while running:
    # Event handling
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
    # Game logic goes here

    # Render/draw your game state
    pygame.display.flip()

pygame.quit()
```
5. Draw the Board: You can draw shapes onto your window using Pygame's drawing functions. For example, you might use `pygame.draw.rect()` to draw each square on your game board.

6. Handle User Input: You'll need to handle user input, such as mouse clicks or key presses. This can be done within your game loop using Pygame's event system.

7. Implement Game Logic: Depending on what game you're making, your game logic could involve checking for win conditions, updating the game state, etc.

8. Render Game State: Finally, after updating your game state, you'll want to render it onto the screen. This could involve redrawing the entire screen, or just updating parts of it.

Remember to fill in the game logic and rendering details according to your specific board game rules and design. This is just a basic structure to get you started.

Also consider organizing your game into classes (e.g., `Board`, `Player`, `Game`) as your game increases in complexity.